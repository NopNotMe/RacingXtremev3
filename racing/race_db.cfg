///////////
// Which database should server use to store race runs and racers info.
say "race_db.cfg 2020 executed"
// databases
defaultvalue "race_db" "default"
defaultvalue "remod_db" "default"
defaultvalue "website_db" "default"

// tables
defaultvalue "records_table" "records"
defaultvalue "local_records_table" "local_records"
defaultvalue "racers_table" "racers"
defaultvalue "players_table" "players"
defaultvalue "maps_table" "maps"
defaultvalue "mapuploads_table" "mapuploads"

//************************************************
// Check if DB table exists and has proper columns
sqlite_create_table = "" // sqlite is too slow

// database "remod_db"

// records table
mysql_create_table = "CREATE TABLE IF NOT EXISTS  `:0` (`id_records` smallint(5) unsigned NOT NULL AUTO_INCREMENT,`id_map` smallint(5) unsigned NOT NULL,`id_player` smallint(5) unsigned NOT NULL,`time` decimal(9,6) NOT NULL,PRIMARY KEY (`id_records`),UNIQUE KEY `id_map` (`id_map`)) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci"
db_check_table "records" $remod_db $records_table "id_records id_map id_player time" $sqlite_create_table $mysql_create_table

// racers table
mysql_create_table = "CREATE TABLE IF NOT EXISTS `:0` (  `name` varchar(40) NOT NULL,`ip` int(4) NOT NULL,`lastseen` int(10) unsigned NOT NULL,`registered` tinyint(1) NOT NULL,PRIMARY KEY (`name`),KEY `name` (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8"
db_check_table "racers" $remod_db $racers_table "name ip lastseen registered" $sqlite_create_table $mysql_create_table

// local_records table
mysql_create_table = "CREATE TABLE IF NOT EXISTS `local_records` (  `id_local_record` smallint(5) unsigned NOT NULL AUTO_INCREMENT,`id_player` smallint(5) unsigned NOT NULL,`id_map` smallint(5) unsigned NOT NULL,`time` decimal(12,3) NOT NULL,PRIMARY KEY (`id_local_record`),UNIQUE KEY `id_map_id_player` (`id_map`,`id_player`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci"
db_check_table "local_records" $remod_db $local_records_table "id_local_record id_player id_map time" $sqlite_create_table $mysql_create_table


// database "race_db"

// players table
mysql_create_table = "CREATE TABLE IF NOT EXISTS `:0` (  `id_player` smallint(5) unsigned NOT NULL AUTO_INCREMENT,`playername` varchar(40) NOT NULL,`clantag` varchar(7) DEFAULT NULL,`banned` tinyint(1) NOT NULL,PRIMARY KEY (`id_player`),KEY `playername` (`playername`),KEY `id_player` (`id_player`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci"
db_check_table "players" $website_db $players_table "id_player playername clantag banned" $sqlite_create_table $mysql_create_table

// maps table
mysql_create_table = "CREATE TABLE IF NOT EXISTS  `:0` (  `id_map` smallint(5) unsigned NOT NULL AUTO_INCREMENT,`mapname` varchar(40) NOT NULL,`mapper` varchar(100) DEFAULT NULL,`version` decimal(3,1) DEFAULT NULL,`difficulty` enum('Easy','Medium','Hard','Multiple') DEFAULT NULL,`description` text,`duel_map` tinyint(1) DEFAULT NULL,PRIMARY KEY (`mapname`),KEY `id_map` (`id_map`),KEY `mapname` (`mapname`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci"
db_check_table "maps" $website_db $maps_table "id_map mapname mapper version difficulty uploadby" $sqlite_create_table $mysql_create_table



//************************************************


race_db_loadmap = [ // only returns id_map at the moment, will be used to load more info in the future
	id_map = -1
	playername = (getvar $arg1 registeredname)
	db_init $race_db
	//make query
	map_query = (format "SELECT id_map FROM maps WHERE mapname = ^"%1^"" $racemap)
	
	echo (format "SELECT id_map FROM maps WHERE mapname = ^"%1^"" $racemap)
	
	query_result = (db_query $map_query $race_db)
	//checking for errors
	if (= $query_result -1) [
		db_error $race_db
	] [
			row = (db_getrow $query_result $race_db) // should only return one row
			id_map = (listat $row 0)
			db_finalize $query_result $race_db	//finish using database
	]
	
	result $id_map
]

// Get registered player's XP
race_db_getxp = [
	cn = $arg1
	db_init $auth_db
	
	//make query
	xp_query = (format "SELECT xp FROM xp WHERE id_player = ^"%1^"" (getvar $cn race_db_id_racer))
	
	query_result = (db_query $xp_query $auth_db)
	//checking for errors
	if (= $query_result -1) [
		db_error $auth_db
	] [
		row = (db_getrow $query_result $auth_db) // should only return one row
		xp = (listat $row 0)
		db_finalize $query_result $auth_db	//finish using database
	]
	
	result $xp
]

//Get registered player's Badge
race_db_getbadge = [
	cn = $arg1
	db_init $auth_db
	
	//make query
	badge_query = (format "SELECT badge FROM badges WHERE id_player = ^"%1^"" (getvar $cn race_db_id_racer))
	
	query_result = (db_query $badge_query $auth_db)
	//checking for errors
	if (= $query_result -1) [
		db_error $auth_db
	] [
		row = (db_getrow $query_result $auth_db) // should only return one row
		badge = (listat $row 0)
		db_finalize $query_result $auth_db	//finish using database
	]
	
	result $badge
]

race_db_getbadgecolor = [
	cn = $arg1
	db_init $auth_db
	
	//make query
	badge_query = (format "SELECT colorcode FROM badges WHERE id_player = ^"%1^"" (getvar $cn race_db_id_racer))
	
	query_result = (db_query $badge_query $auth_db)
	//checking for errors
	if (= $query_result -1) [
		db_error $auth_db
	] [
		row = (db_getrow $query_result $auth_db) // should only return one row
		badgecolor = (listat $row 0)
		db_finalize $query_result $auth_db	//finish using database
	]
	
	result $badgecolor
]

// Lootbox Key DB handler
race_db_addkey = [
	key_racer = $arg1
	key_racer_id = (getvar $arg1 race_db_id_racer)
	
	// Insert
	db__uid = (db_get_dbuid $auth_db)
	res = (mysql_pquery $db__uid "UPDATE loot_keys set loot_keys.keys = loot_keys.keys + 1 WHERE id_player = :0" $key_racer_id)
	
	ircsay (ircyellow (format "%1 found a Lootbox Key! -- @nopnotme *for debug purposes*" (getname $key_racer)))

	// check for errors
	if (=s $res -1) [
		db_error $auth_db
	]
]

// Xcoin DB handler
race_db_addxcoin = [
	xcoin_racer 	= $arg1
	xcoin_racer_id 	= (getvar $arg1 race_db_id_racer)
	xcoins 			= $arg2
		
	// Add Xcoins
	db__uid = (db_get_dbuid $auth_db)
	res = (mysql_pquery $db__uid "UPDATE xcoins set xcoins.xcoins = xcoins.xcoins + :1 WHERE id_player = :0" $xcoin_racer_id $xcoins)
	
	if (=s $res -1) [
		db_error $auth_db
	]
	
	// Get new Total
	db_init $auth_db
	xcoin_query = (format "SELECT xcoins FROM xcoins WHERE id_player = ^"%1^"" $xcoin_racer_id)
	
	query_result = (db_query $xcoin_query $auth_db)
	//checking for errors
	if (= $query_result -1) [
		db_error $auth_db
	] [
		row = (db_getrow $query_result $auth_db) // should only return one row
		player_xcoins = (listat $row 0)
		db_finalize $query_result $auth_db	//finish using database
	]
	
	totalxcoins = $player_xcoins
	
	//xcoin = (- $xcoin 1)
	
//	botsay 128 (
//		format "%1, you earned %2 Xcoin%3 [Wallet: %4]" (getname $xcoin_racer) (
//			? $xcoin $xcoin "an extra"
//		) (? $xcoin "s! Lucky!" ".") $totalxcoins
//	)
	
	if (= $xcoins 1) [
		botsay 128 (format "%1 here's an Xcoin. [Wallet: %2]" (getname $xcoin_racer) $totalxcoins)
	] [
		botsay 128 (format "%1 have %2 Xcoins! [Wallet: %3]" (getname $xcoin_racer) $xcoins $totalxcoins)
	]
	
	ircsay (ircyellow (format "%1 gained %2 Xcoins -- @nopnotme *for debug purposes*" (getname $xcoin_racer) $xcoins ))
]

//race_addbest $name $run
race_db_addresult = [

	if (ismaster $arg1) [
		racer_id = (getvar $arg1 race_db_id_racer)
		racer_name = (getvar $arg1 registeredname)
		race_time = $arg2
		racer_private = $arg3
	
	
	
		echo (format "Adding new best time to race database for map %1: %2 with %3" $racemap $racer_name $race_time)
	
		if $racer_private [
			ircsay (ircyellow (format ":trophy: New Record for %1: %2 seconds" $racemap $race_time))
		] [
			ircsay (ircyellow (format ":trophy: New Record for %1: %2 with %3 seconds [+100 xp]" $racemap $racer_name $race_time))
		]
	
		db__uid = (db_get_dbuid $remod_db)
		
		res = (	mysql_pquery $db__uid "INSERT INTO `:0` (id_map, id_player, time) VALUES (:1, :2, :3) ON DUPLICATE KEY UPDATE time = :3, id_player = :2" $records_table $race_db_id_map $racer_id $race_time)
		
		//res = (	mysql_pquery $db__uid "REPLACE INTO `:0` (id_map, id_player, time) VALUES (':1', ':2', :3)" $records_table $race_db_id_map $racer_id $race_time)
		
		// 50 xp for beating record
		//echo (format "Adding xp for %1" $racer_id)
		db__uidd = (db_get_dbuid $auth_db)
		
		xp = ( mysql_pquery $db__uidd "UPDATE xp set xp = xp + 100 WHERE id_player = :0" $racer_id)
	
		// check for errors
		if (=s $res -1) [
			db_error $remod_db
		]
		
		if (=s $xp -1) [
			db_error $auth_db
		]
	] [
		botsay 128 (format "You need to be verified to set records %1" (getname $arg1))
	]
]

//race_addbest $name $run
race_db_addweekly = [

	if (ismaster $arg1) [
		racer_id = (getvar $arg1 race_db_id_racer)
		racer_name = (getvar $arg1 registeredname)
		race_time = $arg2
		racer_private = $arg3
	
		echo (format "[weeklyDB race_db.cfg]: Adding new weekly time to race database for map %1: %2 with %3" $racemap $racer_name $race_time)
	
		if $racer_private [
			ircsay (ircyellow (format ":trophy: New Weekly Record for %1: %2 seconds" $racemap $race_time))
		] [
			ircsay (ircyellow (format ":trophy: New Weekly Record for %1: %2 with %3 seconds [+25 xp]" $racemap $racer_name $race_time))
		]
	
		//say (format "INSERT INTO weekly_records (id_map, id_player, time) VALUES (%1, %2, %3) ON DUPLICATE KEY UPDATE time = %3, id_player = %2" $race_db_id_map $racer_id $race_time)
	
		db__uid = (db_get_dbuid $remod_db)
		
		res = (	mysql_pquery $db__uid "INSERT INTO weekly_records (id_map, id_player, time) VALUES (:0, :1, :2) ON DUPLICATE KEY UPDATE time = :2, id_player = :1" $race_db_id_map $racer_id $race_time)
		
		//res = (	mysql_pquery $db__uid "REPLACE INTO `:0` (id_map, id_player, time) VALUES (':1', ':2', :3)" $records_table $race_db_id_map $racer_id $race_time)
		
		// 100 xp for beating record
		//echo (format "Adding xp for %1" $racer_id)
		db__uidd = (db_get_dbuid $auth_db)
		
		xp = ( mysql_pquery $db__uidd "UPDATE xp set xp = xp + 30 WHERE id_player = :0" $racer_id)
	
		// check for errors
		if (=s $res -1) [
			db_error $remod_db
		]
		
		if (=s $xp -1) [
			db_error $auth_db
		]
	] [
		botsay 128 (format "You need to be verified to set records %1" (getname $arg1))
	]
]

//race_addbest $name $run
race_db_addultimate = [

	if (ismaster $arg1) [
		racer_id = (getvar $arg1 race_db_id_racer)
		racer_name = (getvar $arg1 registeredname)
		race_time = $arg2
		racer_private = $arg3
	
		echo (format "[ultimateDB race_db.cfg]: Adding new ultimate time to race database for map %1: %2 with %3" $racemap $racer_name $race_time)
		
		ircsay (ircyellow (format ":trophy: New Ultimate Record for %1: %2 with %3 seconds" $racemap $racer_name $race_time))
	
		//say (format "INSERT INTO weekly_records (id_map, id_player, time) VALUES (%1, %2, %3) ON DUPLICATE KEY UPDATE time = %3, id_player = %2" $race_db_id_map $racer_id $race_time)
	
		db__uid = (db_get_dbuid $remod_db)
		
		res = (	mysql_pquery $db__uid "INSERT INTO ultimate_records (id_map, id_player, time) VALUES (:0, :1, :2) ON DUPLICATE KEY UPDATE time = :2, id_player = :1" $race_db_id_map $racer_id $race_time)
		
		//res = (	mysql_pquery $db__uid "REPLACE INTO `:0` (id_map, id_player, time) VALUES (':1', ':2', :3)" $records_table $race_db_id_map $racer_id $race_time)
		
		// 100 xp for beating record
		//echo (format "Adding xp for %1" $racer_id)
		
		db__uidd= (db_get_dbuid $auth_db)
		xp = ( mysql_pquery $db__uidd "UPDATE xp set xp = xp + 1000 WHERE id_player = :0" $racer_id)
	
		// check for errors
		if (=s $res -1) [
			db_error $remod_db
		]
		
		if (=s $xp -1) [
			db_error $auth_db
		]
	] [
		botsay 128 (format "You need to be verified to set records %1" (getname $arg1))
	]
]

race_db_loadweekly = [
	db_weekly = -1
	db_init $remod_db
	
	//make query
	//botsay 128 (format "SELECT playername, time FROM weekly_records INNER JOIN players ON weekly_records.id_player = players.id_player WHERE weekly_records.id_map = ^"%1^"" $race_db_id_map)
	
	record_query = (format "SELECT playername, time FROM weekly_records INNER JOIN players ON weekly_records.id_player = players.id_player WHERE weekly_records.id_map = ^"%1^"" $race_db_id_map)
	query_result = (db_query $record_query $remod_db)
	//checking for errors
	if (= $query_result -1) [
		db_error $remod_db
	] [
		row = (db_getrow $query_result $remod_db) // should only return one row
		if (!=s (listat $row 0) "") [ //check if row exists
			db_weekly = (concat (escape (listat $row 0)) (listat $row 1))
		]
		db_finalize $query_result $remod_db	//finish using database
	]
	
	//botsay 128 $db_weekly
	
	result $db_weekly
]

race_db_loadultimate = [
	db_ultimate = -1
	db_init $remod_db
	//make query
	record_query = (format "SELECT playername, time FROM ultimate_records INNER JOIN players ON ultimate_records.id_player = players.id_player WHERE ultimate_records.id_map = ^"%1^"" $race_db_id_map)
	query_result = (db_query $record_query $remod_db)
	//checking for errors
	if (= $query_result -1) [
		db_error $remod_db
	] [
		row = (db_getrow $query_result $remod_db) // should only return one row
		if (!=s (listat $row 0) "") [ //check if row exists
			db_ultimate = (concat (escape (listat $row 0)) (listat $row 1))
		]
		db_finalize $query_result $remod_db	//finish using database
	]
	result $db_ultimate
]

race_db_loadbest = [
	db_best = -1
	db_init $remod_db
	//make query
	record_query = (format "SELECT playername, time FROM records INNER JOIN players ON records.id_player = players.id_player WHERE records.id_map = ^"%1^"" $race_db_id_map)
	query_result = (db_query $record_query $remod_db)
	//checking for errors
	if (= $query_result -1) [
		db_error $remod_db
	] [
		row = (db_getrow $query_result $remod_db) // should only return one row
		if (!=s (listat $row 0) "") [ //check if row exists
			db_best = (concat (escape (listat $row 0)) (listat $row 1))
		]
		db_finalize $query_result $remod_db	//finish using database
	]
	result $db_best
]

race_db_loadrating = [
	db_rate = 0
	db_init $remod_db
	//make query
	record_query = (format "SELECT count(*) as cnt, AVG(vote) as vote FROM mapvotes WHERE mapvotes.id_map = ^"%1^"" $race_db_id_map)
	query_result = (db_query $record_query $remod_db)
	//checking for errors
	if (= $query_result -1) [
		db_error $remod_db
	] [
		row = (db_getrow $query_result $remod_db) // should only return one row
		if (!=s (listat $row 0) "") [ //check if row exists
			db_rate = (concat (escape (listat $row 0)) (listat $row 1))
		]
		db_finalize $query_result $remod_db	//finish using database
	]
	result $db_rate
]

race_db_mapdiff = [
	db_mapdiff = "Multiple"
	db_init $remod_db
	//make query
	record_query = (format "SELECT difficulty FROM maps WHERE maps.id_map = ^"%1^"" $race_db_id_map)
	query_result = (db_query $record_query $remod_db)
	//checking for errors
	if (= $query_result -1) [
		db_error $remod_db
	] [
		row = (db_getrow $query_result $remod_db) // should only return one row
		if (!=s (listat $row 0) "") [ //check if row exists
			db_mapdiff = (concat (escape (listat $row 0)) (listat $row 1))
		]
		db_finalize $query_result $remod_db	//finish using database
	]

	cases (at $db_mapdiff 0) "Multiple" [
		mapDiff = "^f7[^f5Multiple^f7]"
	] "Easy" [
		mapDiff =  "^f7[^f0Easy^f7]"
	] "Medium" [
		mapDiff =  "^f7[^f2Medium^f7]"	
	] "Hard" [
		mapDiff =  "^f7[^f3Hard^f7]"
	] () [
		mapDiff = "No Map Difficulty Set"
	]

	result $mapDiff
]

race_db_logracer = [
	id_racer = -1 // only if racer is registered  // not registered?
	racer2log = $arg1  //cn
	array = (at $arg2 0)
	registered = (? (= $array -1) (getvar $racer2log registered) (at $array (getclient_array_var $array "registered") 1))
	
	db_init $auth_db

	name = ""

	if (= $registered 1) [
		name = (? (= $array -1) (getvar $racer2log registeredname) (at $array (getclient_array_var $array "registeredname") 1))
		
		//botsay 128 (format "%1: %2" (getname $racer2log) (getvar $racer2log registeredname))
		
		//make query
		racer_query = (format "SELECT id_player FROM players WHERE playername = ^"%1^"" $name)
		query_result = (db_query $racer_query $auth_db)
		//checking for errors
		//echo (format "player is registered race_db.cfg")
		//echo (format "registeredname: %1" (getvar $racer2log registeredname))
		//echo (format "name: %1" $name)
		//echo (format "query: %1" $racer_query)
		if (= $query_result -1) [
			db_error $auth_db
		] [
			row = (db_getrow $query_result $auth_db) // should only return one row
			id_racer = (listat $row 0)
			db_finalize $query_result $auth_db	//finish using database
		]
	] [
		name = (getname $racer2log)
	]
	//ip = (getip $racer2log)
	ip = (ip2int (getip $arg1))
	
	db__uid = (db_get_dbuid $auth_db)
	
	logquery = (format "INSERT INTO `%1` (name, ip, lastseen, registered) VALUES (^"%2^",^"%3^", UNIX_TIMESTAMP(now()), %4) ON DUPLICATE KEY UPDATE ip = %3, lastseen = UNIX_TIMESTAMP(now()), registered = %4" $racers_table $name $ip $registered)

	
	//botsay 128 $logquery
	
	res = (mysql_pquery $db__uid $logquery)

	if (= $res -1) [
		db_error $auth_db
	]

	result $id_racer
]

race_db_isbanned = [
	id_racer = (getvar $arg1 race_db_id_racer)
	banned = 0
	db_init $auth_db
	//make query
	ban_query = (format "SELECT banned FROM %1 WHERE id_player = %2" $players_table $id_racer)
	query_result = (db_query $ban_query $auth_db)
	//checking for errors
	if (= $query_result -1) [
		db_error $auth_db
	] [
		row = (db_getrow $query_result $auth_db) // should only return one row
		banned = (listat $row 0)
		db_finalize $query_result $auth_db	//finish using database
	]
	result $banned
]

race_db_load_local_best = [
	time = -1
	id_racer = (getvar $arg1 race_db_id_racer)
	db_init $remod_db
	//make query
	record_query = (format "SELECT time FROM local_records WHERE id_player = %1 AND id_map = %2" $id_racer $race_db_id_map)
	query_result = (db_query $record_query $remod_db)
	//checking for errors
	if (= $query_result -1) [
	db_error $remod_db
	] [
		row = (db_getrow $query_result $remod_db) // should only return one row
		if (!=s $row "") [ // if it's not empty
			time = (listat $row 0)
		]
		db_finalize $query_result $remod_db	//finish using database
	]
	result $time
]

race_db_add_local_best = [
	id_racer = (getvar $arg1 race_db_id_racer)
	racer_time =  (getvar $arg1 winnertime)
	
	// testing botsay 128 "map_id id_race racer_time" $race_db_id_map $id_racer $racer_time
	
	db__uid = (db_get_dbuid $remod_db)
	res = (	mysql_pquery $db__uid "INSERT INTO local_records (id_map, id_player, time) VALUES (:1, :2, :3) ON DUPLICATE KEY UPDATE time = :3 " $race_db_id_map $id_racer $racer_time)
	
	db__uidd = (db_get_dbuid $auth_db)
	xp = ( mysql_pquery $db__uidd "UPDATE xp set xp = xp + 25 WHERE id_player = :0" $id_racer)
		// check for errors
	if (=s $res -1) [
		db_error $remod_db
	]
	
	if (=s $xp -1) [
		db_error $auth_db
	]
]

protectedname  = [ //result true if the player has a protected name
	racer_name = $arg1
	protected = 0
	names = []
		db_init $auth_db
		//make query
		name_query = (format "SELECT playername FROM players")
		query_result = (db_query $name_query $auth_db)
		//checking for errors
		if (= $query_result -1) [
			db_error $website_db
		] [
			while [ row = (db_getrow $query_result $website_db); result (!=s $row "") ] [ // we get all the name for comparison
				names = (listadd $names (listat $row 0))
			]
			looplist name $names [
				protected = (+ $protected (!= (strstr $racer_name $name) -1)) // can be > 1 if the name contains itself two protected name
			]
				
			db_finalize $query_result $website_db	//finish using database
		]
		result $protected
]

race_db_pullmap = [
	map_name = $arg1 // does not need to play the map needing to be pulled out

	db__uid = (db_get_dbuid $race_db)

	res = (	mysql_pquery $db__uid "UPDATE `:0` SET id_map=(SELECT id_map FROM maps WHERE mapname LIKE ':1'), status='inactive'" $mapuploads_table $racemap)

		// check for errors
	if (=s $res -1) [
		db_error $race_db
	]
]


race_db_top_five = [
	map_id = $arg1
	cn = $arg2
	
	db_init $remod_db
	
	//make query
	top_query = (format "SELECT playername, time FROM local_records INNER JOIN players on local_records.id_player = players.id_player WHERE local_records.id_map = ^"%1^" ORDER BY time ASC LIMIT 5" $map_id)
	query_result = (db_query $top_query $remod_db)
	
	//checking for errors
		if (= $query_result -1) [
			db_error $remod_db
		] [
			
			pm $cn "^tTop ^f05 ^f7Records:"
			
			while [ row = (db_getrow $query_result $remod_db); result (!=s $row "") ] [ // we get all the name for comparison
				top_five = (listadd $top_five (concat "^f0"(listat $row 0) "^f7: " (listat $row 1) "^n"))
				pm $cn (concat "^t^f0"(listat $row 0)"^f7:"(listat $row 1))
			]
			
			looplist player $top_five [
				//echo (format "%1" $player)
			]
			
			//say $top_five
			
			//looplist name $names [
				//protected = (+ $protected (!= (strstr $racer_name $name) -1)) // can be > 1 if the name contains itself two protected name
			//]
				
			db_finalize $query_result $remod_db	//finish using database
		]
	
	result $top_five
]
